/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imagestegano;

import java.awt.image.BufferedImage;
import java.awt.image.ColorModel;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import steganography.BPCS;
import utility.ImageUtility;

/**
 *
 * @author varun
 */
public class ImageStegano extends javax.swing.JFrame {

    BufferedImage originalImage;
    BufferedImage currentImage;
    ImageUtility imageUtility;
    BPCS bitPlane;
    File openedFile;
    
    //pixel size of original image
    int pixelSize;
    
    /**
     * value of bpcsIndex - 
     * [-8, -1] all plane where -8 is MSB and -1 is LSB
     * [0, 7] blue plane where 0 is MSB and 7 is LSB 
     * [8, 15] green plane where 8 is MSB and 15 is LSB 
     * [16, 23] red plane
     * if alpha channel is present then [0, 7] alpha plane, 0 is MSB and
     * all other planes is shifted by one byte
     * color model is ABGR or BGR (in byte array)
     */
    int bpcsIndex;
    
    //negative index will be used for all plane BPCS as well as some other 
    //modification
    int minIndex;
    
    /**
     * Creates new form ImageStegano
     */
    public ImageStegano() {
        originalImage = null;
        currentImage = null;
        imageUtility = new ImageUtility();
        bitPlane = new BPCS();
        bpcsIndex = -9;
        
        //[-1, -8] all plane BPCS
        minIndex = -8;
        
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        nameLabel = new javax.swing.JLabel();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        imageLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        analyzeMenu = new javax.swing.JMenu();
        histogramMenu = new javax.swing.JMenu();
        colourMapMenu = new javax.swing.JMenu();
        hideDataMenu = new javax.swing.JMenu();
        helpMenu = new javax.swing.JMenu();

        fileChooser.setDialogTitle("Choose an image");
        fileChooser.setFileFilter(new ImageFilter());

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        nameLabel.setText("Open an Image using Ctrl + O or File menu");

        previousButton.setText("Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });
        previousButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                previousButtonKeyReleased(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        nextButton.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                nextButtonKeyReleased(evt);
            }
        });

        imageLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jScrollPane1.setViewportView(imageLabel);

        fileMenu.setText("File");

        openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveAsMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveAsMenuItem.setText("Save As");
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        jMenuBar1.add(fileMenu);

        analyzeMenu.setText("Analyze");
        jMenuBar1.add(analyzeMenu);

        histogramMenu.setText("Histogram");
        jMenuBar1.add(histogramMenu);

        colourMapMenu.setText("Colour Map");
        jMenuBar1.add(colourMapMenu);

        hideDataMenu.setText("Hide Data");
        jMenuBar1.add(hideDataMenu);

        helpMenu.setText("Help");
        jMenuBar1.add(helpMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(113, 113, 113)
                .addComponent(previousButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nextButton)
                .addGap(143, 143, 143))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 568, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 293, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(previousButton)
                    .addComponent(nextButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        fileChooser.setDialogTitle("Select an image");
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            openedFile = fileChooser.getSelectedFile();
            String name = openedFile.getName();
            try {
                ImageFilter imageFilter = new ImageFilter();
                if (imageFilter.isImage(name)) {
                    originalImage = ImageIO.read(openedFile);
                    
                    // will initialize pixelSize variable
                    printImageInfo(originalImage);
                    
                    // converting original image to suitable type
                    originalImage = imageUtility.convertImage(originalImage);
                    
                    // will ovverride pixelSize variable
                    printImageInfo(originalImage);
                    imageLabel.setIcon(new ImageIcon(originalImage));
                    nameLabel.setText("Normal Image. Use --> " + 
                            "and <-- key to navigate.");
                } else {
                    JOptionPane.showMessageDialog(null, 
                            "Please select an image");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_openMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        if (bpcsIndex <= minIndex) {
            bpcsIndex = pixelSize;
        }
        bpcsIndex--;
        manipulateImage();
    }//GEN-LAST:event_previousButtonActionPerformed

    private void previousButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_previousButtonKeyReleased
        int keyCode = evt.getKeyCode();
        if (keyCode == 39) {
            nextButton.doClick();
        } else if (keyCode == 37) {
            previousButton.doClick();
        }
    }//GEN-LAST:event_previousButtonKeyReleased

    private void nextButtonKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nextButtonKeyReleased
        int keyCode = evt.getKeyCode();
        if (keyCode == 39) {
            nextButton.doClick();
        } else if (keyCode == 37) {
            previousButton.doClick();
        }
    }//GEN-LAST:event_nextButtonKeyReleased

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        if (bpcsIndex >= pixelSize - 1) {
            bpcsIndex = minIndex - 1;
        }
        bpcsIndex++;
        manipulateImage();
    }//GEN-LAST:event_nextButtonActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        if (currentImage == null) {
            return;
        }
        fileChooser.setDialogTitle("Choose a location");
        String oldFileName = openedFile.getName();
        String newFileName = imageUtility.getNewFileName(oldFileName);
        String path = openedFile.getAbsolutePath();
        path = path.substring(0, path.lastIndexOf(File.separator) + 1);
        File file = new File(path + newFileName);
        fileChooser.setSelectedFile(file);
        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fileChooser.getSelectedFile();
            String name = file.getName();
            if (imageUtility.isImage(name)) {
                imageUtility.saveImage(currentImage, file);
            } else {
                JOptionPane.showMessageDialog(null, "Invalid file name");
            }
            
        } else {
            System.out.println("File access cancelled by user.");
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ImageStegano.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ImageStegano.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ImageStegano.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ImageStegano.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ImageStegano().setVisible(true);
            }
        });
    }
    
    private void applySinglePlaneBPCS() {
        if (originalImage != null) {
            currentImage = imageUtility.copyImage(originalImage);
            bitPlane.singlePlaneBPCS(currentImage, bpcsIndex, pixelSize);
            imageLabel.setIcon(new ImageIcon(currentImage));
            int bitPlaneCode = bpcsIndex / 8;
            String bitPlaneName = "Alpha";
            
            // checking if alpha channel is absent
            if (pixelSize <= 24) {
                bitPlaneCode += 1;
            }
            switch(bitPlaneCode) {
                case 1: 
                    bitPlaneName = "Blue";
                    break;
                case 2:
                    bitPlaneName = "Green";
                    break;
                case 3:
                    bitPlaneName = "Red";
                    break;
            }
            nameLabel.setText(bitPlaneName + " plane: " + 
                    (7 - (bpcsIndex % 8)) + "th bit");
        }
    }
    
    private void manipulateImage() {
        if (bpcsIndex >= 0) {
            applySinglePlaneBPCS();
        } else if (bpcsIndex >= minIndex) {
            applyAllPlaneBPCS();
        }
    }
    
    private void applyAllPlaneBPCS() {
        if (originalImage != null) {
            currentImage = imageUtility.copyImage(originalImage);
            bitPlane.allPlaneBPCS(currentImage, bpcsIndex, pixelSize);
            imageLabel.setIcon(new ImageIcon(currentImage));
            nameLabel.setText("All plane: " + ((bpcsIndex * -1) - 1) + "th bit");
        }
    }
    
    private void printImageInfo(BufferedImage image) {
        System.out.println("Image Type: " + image.getType());
        ColorModel colorModel = image.getColorModel();
        pixelSize = colorModel.getPixelSize();
        System.out.println("Pixel size: " + pixelSize);
        System.out.println("Alpha channel present: "
                + colorModel.hasAlpha());
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu analyzeMenu;
    private javax.swing.JMenu colourMapMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenu hideDataMenu;
    private javax.swing.JMenu histogramMenu;
    private javax.swing.JLabel imageLabel;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JButton nextButton;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JButton previousButton;
    private javax.swing.JMenuItem saveAsMenuItem;
    // End of variables declaration//GEN-END:variables
}
